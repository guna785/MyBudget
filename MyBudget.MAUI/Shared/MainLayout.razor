@inherits LayoutComponentBase
@inject Microsoft.Extensions.Localization.IStringLocalizer<MainLayout> _localizer
@using Plugin.Fingerprint.Abstractions

<MudRTLProvider RightToLeft="@_rightToLeft">
    <audio id="notification" src="/media/notification.mp3" />
    <MudThemeProvider Theme="_currentTheme" />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <AuthorizeView>
        <NotAuthorized>
            <MudAppBar Elevation="4" Color="Color.Primary">
                <MudSpacer />
                <LanguageSelector />
                <MudFab Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => DarkMode())" />
            </MudAppBar>

            <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
                <MudPaper Elevation="25" Class="pa-8" Style="width: 500px;">
                    @Body
                </MudPaper>
            </MudContainer>
        </NotAuthorized>
        <Authorized>
            <MudLayout>
                @if (isFingerPrintAuth)
                {
                    <MainBody OnDarkModeToggle="@DarkMode" OnRightToLeftToggle="@RightToLeftToggle">
                        @Body
                    </MainBody>
                }
                else
                {
                    <MudPaper Outlined="true" Class="border-dashed">
                        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Row="false"  Spacing="10" Style="height:300px;">
                             <MudIconButton Color="Color.Primary" Class="py-1 px-3 mud-theme-primary" @onclick="(e=>FingerPrintAuth())" Icon="@Icons.Filled.Fingerprint"></MudIconButton>
                        </MudStack>
                    </MudPaper>
                   
                }
            </MudLayout>
        </Authorized>
    </AuthorizeView>
</MudRTLProvider>
@code {
    private MudTheme _currentTheme;
    private bool _rightToLeft = false;
    [Inject] private IFingerprint fingerprint { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    private bool isFingerPrintAuth = false;
    private async Task RightToLeftToggle(bool value)
    {
        _rightToLeft = value;
        await Task.CompletedTask;
    }
    protected override async Task OnInitializedAsync()
    {
        _currentTheme = DentalTheme.DefaultTheme;
        _currentTheme = await _clientPreferenceManager.GetCurrentThemeAsync();
        _rightToLeft = await _clientPreferenceManager.IsRTL();
        _interceptor.RegisterEvent();
    }
    private async Task FingerPrintAuth()
    {
        var request = new AuthenticationRequestConfiguration("Validate that you have fingers", "Because without them you will not be able to access");
        var result = await fingerprint.AuthenticateAsync(request);
        if (result.Authenticated)
        {
            _snackBar.Add($"Fingureprint Authentication Successfull!...");
            isFingerPrintAuth = true;
            StateHasChanged();
        }
        else
        {
            _snackBar.Add($"Fingureprint Authentication Failed Try again");
            isFingerPrintAuth = true;
            StateHasChanged();
        }
    }
    private async Task DarkMode()
    {
        bool isDarkMode = await _clientPreferenceManager.ToggleDarkModeAsync();
        _currentTheme = isDarkMode
            ? DentalTheme.DefaultTheme
            : DentalTheme.DarkTheme;
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}