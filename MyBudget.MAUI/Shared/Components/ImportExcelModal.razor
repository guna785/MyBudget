@inject Microsoft.Extensions.Localization.IStringLocalizer<ImportExcelModal> _localizer

<EditForm Model="@UploadRequest" OnValidSubmit="SaveAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <MudDialog>
        <TitleContent>
            @_localizer["Import"] - @ModelName
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput"
                               Class="mb-1">
                        @_localizer["Upload"]
                    </MudButton>
                    <InputFile id="fileInput" hidden OnChange="UploadFiles" accept=".xlsx" />
                    <br />
                    <br />
                    @if (_file != null)
                    {
                        <MudAlert ShowCloseIcon="true" CloseIconClicked="(() => _file = null)" OnClick="(() => _file = null)">@_file.Name</MudAlert>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">@_localizer["Please upload excel file!"]</MudAlert>
                    }
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton DisableElevation Variant="Variant.Filled" OnClick="Cancel">@_localizer["Cancel"]</MudButton>
            <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit" Disabled="@(_file == null)" Color="Color.Success">@_localizer["Import"]</MudButton>
        </DialogActions>

    </MudDialog>
    <MudOverlay Visible="_uploading" LightBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>
</EditForm>
@code{
    private IBrowserFile _file;
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Parameter] public UploadRequest UploadRequest { get; set; } = new();
    [Parameter] public string ModelName { get; set; }
    [Parameter] public Func<UploadRequest, Task<IResult<int>>> OnSaved { get; set; }

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });
    private bool _uploading = false;
    public void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task SaveAsync()
    {
        if (OnSaved != null)
        {
            _uploading = true;
            var result = await OnSaved.Invoke(UploadRequest);
            if (result.Succeeded)
            {
                _snackBar.Add(result.Messages[0], Severity.Success);
                MudDialog.Close();
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
            _uploading = false;
        }
        else
        {
            MudDialog.Close();
        }

        await Task.CompletedTask;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        _file = e.File;
        if (_file != null)
        {
            var buffer = new byte[_file.Size];
            var extension = Path.GetExtension(_file.Name);
            await _file.OpenReadStream(_file.Size).ReadAsync(buffer);
            UploadRequest = new UploadRequest
                {
                    Data = buffer,
                    FileName = _file.Name,
                    UploadType = MyBudget.Application.Enums.UploadType.Document,
                    Extension = extension
                };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        await Task.CompletedTask;
    }
}