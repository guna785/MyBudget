@page "/identity/roles"
@attribute [Authorize(Policy = MyBudget.Shared.Constants.Permission.Permissions.Roles.View)]
@inject Microsoft.Extensions.Localization.IStringLocalizer<Roles> _localizer
@using MyBudget.Application.Responses.Identity
@using System.ComponentModel.Design

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<MyBudgetTitle Title="@_localizer["Roles"]" Description="@_localizer["Manage Roles."]" />
@if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Hover="true" Elevation="25" Items="_roleList" Dense="@_dense" Bordered="@_bordered" Striped="@_striped" Filter="new Func<RoleResponse, bool>(Search)" @bind-role="_role">
        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                @if (_canCreateRoles)
                {
                    <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">@_localizer["Create"]</MudButton>
                    <MudButton DisableElevation Variant="Variant.Filled" OnClick="GetRolesAsync" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">@_localizer["Reload"]</MudButton>
                }
                else
                {
                    <MudButton DisableElevation Variant="Variant.Filled" OnClick="GetRolesAsync" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">@_localizer["Reload"]</MudButton>
                }
            </div>
            <MudSpacer />
            @if (_canSearchRoles)
            {
                <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="@_localizer["Search for Roles..."]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<RoleResponse, object>(x => x.Id)">@_localizer["Id"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<RoleResponse, object>(x => x.Name)">@_localizer["Role"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<RoleResponse, object>(x => x.Description)">@_localizer["Description"]</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:right">@_localizer["Actions"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="@_localizer["Role"]">
                <MudHighlighter Text="@context.Name" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="@_localizer["Description"]">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="@_localizer["Actions"]" Style="text-align: right">
                @if (_canViewRoleClaims || _canEditRoles || _canDeleteRoles)
                    {
                    <MudMenu Label="@_localizer["Actions"]" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" Direction="Direction.Left" OffsetX="true">
                        @if (_canViewRoleClaims)
                            {
                            <MudMenuItem @onclick="@(() => ManagePermissions(@context.Id.ToString()))">@_localizer["Manage Permission"]</MudMenuItem>
                            }
                        @if (_canEditRoles)
                            {
                            <MudMenuItem @onclick="@(() => InvokeModal(@context.Id.ToString()))">@_localizer["Edit"]</MudMenuItem>
                            }
                        @if (_canDeleteRoles)
                            {
                            <MudMenuItem @onclick="@(() => Delete(@context.Id.ToString()))">@_localizer["Delete"]</MudMenuItem>
                            }
                    </MudMenu>
                    }
                    else
                    {
                    <MudButton Variant="Variant.Filled"
                               DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch"
                               IconColor="Color.Secondary"
                               Size="Size.Small"
                               Color="Color.Surface">
                        @_localizer["No Allowed Actions"]
                    </MudButton>
                    }
            </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudSwitch @bind-Checked="@_dense" Color="Color.Secondary" Style="margin-left: 5px;">@_localizer["Dense"]</MudSwitch>
            <MudSwitch @bind-Checked="@_striped" Color="Color.Tertiary" Style="margin-left: 5px;">@_localizer["Striped"]</MudSwitch>
            <MudSwitch @bind-Checked="@_bordered" Color="Color.Warning" Style="margin-left: 5px;">@_localizer["Bordered"]</MudSwitch>
        </FooterContent>
        <PagerContent>
            <TablePager />
        </PagerContent>
    </MudTable>
}

@code {
    [Inject] private IRoleManager RoleManager { get; set; }

    [CascadingParameter] private HubConnection HubConnection { get; set; }

    private List<RoleResponse> _roleList = new();
    private RoleResponse _role = new();
    private string _searchString = "";
    private bool _dense = false;
    private bool _striped = true;
    private bool _bordered = false;

    private ClaimsPrincipal _currentUser;
    private bool _canCreateRoles;
    private bool _canEditRoles;
    private bool _canDeleteRoles;
    private bool _canSearchRoles;
    private bool _canViewRoleClaims;
    private bool _loaded;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await _authenticationManager.CurrentUser();
        _canCreateRoles = (await _authorizationService.AuthorizeAsync(_currentUser, MyBudget.Shared.Constants.Permission.Permissions.Roles.Create)).Succeeded;
        _canEditRoles = (await _authorizationService.AuthorizeAsync(_currentUser, MyBudget.Shared.Constants.Permission.Permissions.Roles.Edit)).Succeeded;
        _canDeleteRoles = (await _authorizationService.AuthorizeAsync(_currentUser, MyBudget.Shared.Constants.Permission.Permissions.Roles.Delete)).Succeeded;
        _canSearchRoles = (await _authorizationService.AuthorizeAsync(_currentUser, MyBudget.Shared.Constants.Permission.Permissions.Roles.Search)).Succeeded;
        _canViewRoleClaims = (await _authorizationService.AuthorizeAsync(_currentUser, MyBudget.Shared.Constants.Permission.Permissions.RoleClaims.View)).Succeeded;

        await GetRolesAsync();
        _loaded = true;
        HubConnection = HubConnection.TryInitialize(_navigationManager);
        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
    }

    private async Task GetRolesAsync()
    {
        var response = await RoleManager.GetRolesAsync();
        if (response.Succeeded)
        {
            _roleList = response.Data.ToList();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    private async Task Delete(string id)
    {
        string deleteContent = _localizer["Delete Content"];
        var parameters = new DialogParameters
            {
                {nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>(_localizer["Delete"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await RoleManager.DeleteAsync(id);
            if (response.Succeeded)
            {
                await Reset();
                await HubConnection.SendAsync(ApplicationConstants.SignalR.SendUpdateDashboard);
                _snackBar.Add(response.Messages[0], Severity.Success);
            }
            else
            {
                await Reset();
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
    }

    private async Task InvokeModal(string id = null)
    {
        var parameters = new DialogParameters();
        if (id != null)
        {
            _role = _roleList.FirstOrDefault(c => c.Id == Convert.ToInt32( id));
            if (_role != null)
            {
                parameters.Add(nameof(RoleModal.RoleModel), new RoleRequest
                    {
                        Id = _role.Id,
                        Name = _role.Name,
                        Description = _role.Description
                    });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<RoleModal>(id == null ? _localizer["Create"] : _localizer["Edit"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private async Task Reset()
    {
        _role = new RoleResponse();
        await GetRolesAsync();
    }

    private bool Search(RoleResponse role)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        if (role.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (role.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    private void ManagePermissions(string roleId)
    {
        _navigationManager.NavigateTo($"/identity/role-permissions/{roleId}");
    }
}
