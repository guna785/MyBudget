@page "/audit-trails"
@using System.Globalization
@attribute [Authorize(Policy = MyBudget.Shared.Constants.Permission.Permissions.AuditTrails.View)]
@inject Microsoft.Extensions.Localization.IStringLocalizer<AuditTrails> _localizer

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<MyBudgetTitle Title="@_localizer["Audit Trails"]" Description="@_localizer["Your Recent Activities."]" />
@if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Hover="false" Dense="@_dense" Bordered="@_bordered" Striped="@_striped" Elevation="25" Items="Trails" Filter="new Func<RelatedAuditTrail, bool>(Search)" @bind-trail="_trail" CustomHeader="true">
        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                @if (_canExportAuditTrails)
                {
                    <MudButton DisableElevation IconColor="Color.Secondary" Variant="Variant.Filled" OnClick="ExportToExcelAsync" StartIcon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Surface">@_localizer["Export To Excel"]</MudButton>
                }
            </div>
            <MudSpacer />
            @if (_canSearchAuditTrails)
            {
                <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="@_localizer["Search for Trails"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
            }
        </ToolBarContent>
        <HeaderContent>
            @if (_canSearchAuditTrails)
                {
                <MudTHeadRow IgnoreCheckbox="true">
                    <MudTh colspan="2">
                        <MudDateRangePicker @ref="_dateRangePicker" PickerVariant="PickerVariant.Dialog" Label="@_localizer["Date Range For Searching"]" @bind-DateRange="_dateRange">
                            <PickerActions>
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _dateRangePicker.Clear())">@_localizer["Clear"]</MudButton>
                                <MudButton OnClick="@(() => _dateRangePicker.Close(false))">@_localizer["Cancel"]</MudButton>
                                <MudButton Color="Color.Primary" OnClick="@(() => _dateRangePicker.Close())">@_localizer["Ok"]</MudButton>
                            </PickerActions>
                        </MudDateRangePicker>
                    </MudTh>
                    <MudTh colspan="3" Style="text-align: right">
                        <MudSwitch @bind-Checked="@_searchInOldValues" Color="Color.Primary" Style="margin-left: 5px;">@_localizer["Search in Old Values"]</MudSwitch>
                        <MudSwitch @bind-Checked="@_searchInNewValues" Color="Color.Primary" Style="margin-left: 5px;">@_localizer["Search in New Values"]</MudSwitch>
                    </MudTh>
                </MudTHeadRow>
                }
            <MudTHeadRow IgnoreCheckbox="true">
                <MudTh><MudTableSortLabel SortBy="new Func<RelatedAuditTrail, object>(x => x.Id)">@_localizer["Id"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<RelatedAuditTrail, object>(x => x.TableName)">@_localizer["Table Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<RelatedAuditTrail, object>(x => x.DateTime)">@_localizer["Date"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<RelatedAuditTrail, object>(x => x.Type)">@_localizer["Type"]</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: right"></MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">
                <MudHighlighter Text="@context.TableName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Date">
                <MudItem>
                    <MudChip Icon="@Icons.Material.Filled.Watch" IconColor="Color.Secondary" Label="true" Color="Color.Surface">@_localizer["Local"] : @context.LocalTime.ToString("G", CultureInfo.CurrentCulture)</MudChip>
                </MudItem>
                <MudItem>
                    <MudChip Icon="@Icons.Material.Filled.Watch" IconColor="Color.Secondary" Label="true" Color="Color.Surface">@_localizer["UTC"] : @context.DateTime.ToString("G", CultureInfo.CurrentCulture)</MudChip>
                </MudItem>
            </MudTd>
            <MudTd DataLabel="Tax">@context.Type</MudTd>
            <MudTd Style="text-align:right">
                <MudButton Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" OnClick="@(() => ShowBtnPress(context.Id))">@((context.ShowDetails == true)? _localizer["Hide"] : _localizer["Show"]) @_localizer["Trail Details"]</MudButton>
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowDetails)
                {
                <MudTr>
                    <td colspan="5">
                        <MudCard Elevation="25">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudAlert Severity="Severity.Info" Typo="Typo.body1">@_localizer["Details for Trail ID"] : <strong>@context.Id</strong></MudAlert>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <table class="mud-table-root">
                                    <tbody class="mud-table-body">
                                        @if (!string.IsNullOrEmpty(context.AffectedColumns))
                                            {
                                            <tr class="mud-table-row" style="padding:10px!important">
                                                <td>@_localizer["Columns Affected"]</td>
                                                <td>
                                                    <MudItem>
                                                        @foreach (var column in context.AffectedColumns.Trim('[').Trim(']').Split(','))
                                                            {
                                                            <MudChip Label="true" Color="Color.Surface">@column.Replace('"', ' ').Trim()</MudChip>
                                                            }
                                                    </MudItem>
                                                </td>
                                            </tr>
                                            }
                                        <tr class="mud-table-row">
                                            <td>@_localizer["Primary Key"]</td>
                                            <td>
                                                <MudItem>
                                                    <MudChip Label="true" Color="Color.Surface">@context.PrimaryKey.Trim('{').Trim('}').Replace('"', ' ').Trim()</MudChip>
                                                </MudItem>
                                            </td>
                                        </tr>

                                        @if (!string.IsNullOrEmpty(context.OldValues))
                                            {
                                            <tr class="mud-table-row">
                                                <td>@_localizer["Old Values"]</td>
                                                <td>

                                                    <MudItem>
                                                        @foreach (var value in context.OldValues.Trim('{').Trim('}').Split(','))
                                                            {
                                                            @if (_searchInOldValues)
                                                                {
                                                                <MudChip Label="true" Color="Color.Warning">
                                                                    <MudHighlighter Text="@value.Replace('"', ' ').Trim()" HighlightedText="@_searchString" />
                                                                </MudChip>
                                                                }
                                                                else
                                                                {
                                                                <MudChip Label="true" Color="Color.Warning">@value.Replace('"', ' ').Trim()</MudChip>
                                                                }
                                                            }
                                                    </MudItem>
                                                </td>
                                            </tr>
                                            }
                                        @if (!string.IsNullOrEmpty(context.NewValues))
                                            {
                                            <tr class="mud-table-row">
                                                <td>@_localizer["New Values"]</td>
                                                <td>

                                                    <MudItem>
                                                        @foreach (var value in context.NewValues.Trim('{').Trim('}').Split(','))
                                                            {
                                                            @if (_searchInNewValues)
                                                                {
                                                                <MudChip Label="true" Color="Color.Success">
                                                                    <MudHighlighter Text="@value.Replace('"', ' ').Trim()" HighlightedText="@_searchString" />
                                                                </MudChip>
                                                                }
                                                                else
                                                                {
                                                                <MudChip Label="true" Color="Color.Success">@value.Replace('"', ' ').Trim()</MudChip>
                                                                }
                                                            }
                                                    </MudItem>
                                                </td>
                                            </tr>
                                            }
                                    </tbody>
                                </table>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>}
        </ChildRowContent>
        <FooterContent>
            <MudSwitch @bind-Checked="@_dense" Color="Color.Secondary" Style="margin-left: 5px;">@_localizer["Dense"]</MudSwitch>
            <MudSwitch @bind-Checked="@_striped" Color="Color.Tertiary" Style="margin-left: 5px;">@_localizer["Striped"]</MudSwitch>
            <MudSwitch @bind-Checked="@_bordered" Color="Color.Warning" Style="margin-left: 5px;">@_localizer["Bordered"]</MudSwitch>
        </FooterContent>
        <PagerContent>
            <TablePager />
        </PagerContent>
    </MudTable>
}

@code{
     [Inject] private IAuditManager AuditManager { get; set; }

        public List<RelatedAuditTrail> Trails = new();

        private RelatedAuditTrail _trail = new();
        private string _searchString = "";
        private bool _dense = true;
        private bool _striped = true;
        private bool _bordered = false;
        private bool _searchInOldValues = false;
        private bool _searchInNewValues = false;
        private MudDateRangePicker _dateRangePicker;
        private DateRange _dateRange;

        private ClaimsPrincipal _currentUser;
        private bool _canExportAuditTrails;
        private bool _canSearchAuditTrails;
        private bool _loaded;

        private bool Search(AuditResponse response)
        {
            var result = false;

            // check Search String
            if (string.IsNullOrWhiteSpace(_searchString)) result = true;
            if (!result)
            {
                if (response.TableName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
                {
                    result = true;
                }
                if (_searchInOldValues &&
                    response.OldValues?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
                {
                    result = true;
                }
                if (_searchInNewValues &&
                    response.NewValues?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
                {
                    result = true;
                }
            }

            // check Date Range
            if (_dateRange?.Start == null && _dateRange?.End == null) return result;
            if (_dateRange?.Start != null && response.DateTime < _dateRange.Start)
            {
                result = false;
            }
            if (_dateRange?.End != null && response.DateTime > _dateRange.End + new TimeSpan(0,11, 59, 59, 999))
            {
                result = false;
            }

            return result;
        }

        protected override async Task OnInitializedAsync()
        {
            _currentUser = await _authenticationManager.CurrentUser();
        _canExportAuditTrails = (await _authorizationService.AuthorizeAsync(_currentUser, MyBudget.Shared.Constants.Permission.Permissions.AuditTrails.Export)).Succeeded;
        _canSearchAuditTrails = (await _authorizationService.AuthorizeAsync(_currentUser, MyBudget.Shared.Constants.Permission.Permissions
            .AuditTrails.Search)).Succeeded;

            await GetDataAsync();
            _loaded = true;
        }

        private async Task GetDataAsync()
        {
            var response = await AuditManager.GetCurrentUserTrailsAsync();
            if (response.Succeeded)
            {
                Trails = response.Data
                    .Select(x => new RelatedAuditTrail
                    {
                        AffectedColumns = x.AffectedColumns,
                        DateTime = x.DateTime,
                        Id = x.Id,
                        NewValues = x.NewValues,
                        OldValues = x.OldValues,
                        PrimaryKey = x.PrimaryKey,
                        TableName = x.TableName,
                        Type = x.Type,
                        UserId = x.UserId,
                        LocalTime = DateTime.SpecifyKind(x.DateTime, DateTimeKind.Utc).ToLocalTime()
                    }).ToList();
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }

        private void ShowBtnPress(int id)
        {
            _trail = Trails.First(f => f.Id == id);
            foreach (var trial in Trails.Where(a => a.Id != id))
            {
                trial.ShowDetails = false;
            }
            _trail.ShowDetails = !_trail.ShowDetails;
        }

        private async Task ExportToExcelAsync()
        {
            var response = await AuditManager.DownloadFileAsync(_searchString, _searchInOldValues, _searchInNewValues);
            if (response.Succeeded)
            {
                await _jsRuntime.InvokeVoidAsync("Download", new
                {
                    ByteArray = response.Data,
                    FileName = $"{nameof(AuditTrails).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
                    MimeType = ApplicationConstants.MimeTypes.OpenXml
                });
                _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
                    ? _localizer["Audit Trails exported"]
                    : _localizer["Filtered Audit Trails exported"], Severity.Success);
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }

        public class RelatedAuditTrail : AuditResponse
        {
            public bool ShowDetails { get; set; } = false;
            public DateTime LocalTime { get; set; }
        }
}